- name: Create echaloasuerte application tree
  file:
    path: "{{ item }}"
    state: directory
    owner: www-data
    group: www-data
    recurse: yes
  become: yes
  with_items:
  - "{{ echaloasuerte_3_root }}"
  - "{{ echaloasuerte_3_app }}"
  - "{{ echaloasuerte_3_venv }}"
  - "{{ echaloasuerte_3_logs }}"
  - /var/www

- name: Clone/update backend repository in {{ echaloasuerte_3_app }}
  git:
    repo: https://github.com/etcaterva/eas-backend
    dest: "{{ echaloasuerte_3_app }}"
    update: yes
    accept_hostkey: yes
    force: yes
  become: yes
  become_user: www-data
  notify:
  - restart all uwsgi

- name: Add xip.io to the ALLOWED_HOSTS list when TEST_DEPLOYMENT is defined
  lineinfile:
    dest: "{{ echaloasuerte_3_app }}/eas/settings/base.py"
    regexp: "xip.io"
    insertafter: "^ALLOWED_HOSTS"
    line: "    '.xip.io',"
  become: yes
  become_user: www-data
  when: TEST_DEPLOYMENT is defined

- name: Manually create the initial virtualenv
  command: virtualenv {{ echaloasuerte_3_venv }} -p python3
  args:
    creates: "{{ echaloasuerte_3_venv }}/bin/python3"
  become: yes
  become_user: www-data

- name: Update pip to latest
  pip:
    name: pip
    state: latest
    virtualenv: "{{ echaloasuerte_3_venv }}"
  become: yes
  become_user: www-data

- name: Update setuptools to latest
  pip:
    name: setuptools
    state: latest
    virtualenv: "{{ echaloasuerte_3_venv }}"
  become: yes
  become_user: www-data

- name: Setup virtual environment for the app using requirements.txt
  pip:
    requirements: "{{ echaloasuerte_3_app }}/requirements/prod.txt"
    virtualenv: "{{ echaloasuerte_3_venv }}"
    virtualenv_python: python3
  become: yes
  become_user: www-data

- name: Setup EXTRA deps needed
  pip:
    name: django-cors-headers
    virtualenv: "{{ echaloasuerte_3_venv }}"
  become: yes
  become_user: www-data

- name: Update /etc/hosts to add 'db' IP address
  lineinfile:
    dest: /etc/hosts
    regexp: '127.0.0.1 db$'
    line: '127.0.0.1 db'
    state: present
  become: yes
  ignore_errors: yes

- name: Synchronize django app database
  django_manage:
    command: migrate
    app_path: "{{ echaloasuerte_3_app }}"
    virtualenv: "{{ echaloasuerte_3_venv }}"
    settings: "{{ echaloasuerte_3_app_settings }}"
  become: yes
  become_user: www-data

# Superuser

- name: Check if django superuser exists
  django_manage:
    app_path: "{{ echaloasuerte_3_app }}"
    virtualenv: "{{ echaloasuerte_3_venv }}"
    settings: "{{ echaloasuerte_3_app_settings }}"
    command: shell -c 'import sys; from django.contrib.auth.models import User; sys.exit(0 if User.objects.filter(username="{{ eas_admin_username }}").count() > 0 else 1)'
  become: yes
  become_user: www-data
  register: checksuperuser
  ignore_errors: True
  changed_when: False
  tags:
  - superuser

- name: django create superuser
  django_manage:
    app_path: "{{ echaloasuerte_3_app }}"
    virtualenv: "{{ echaloasuerte_3_venv }}"
    settings: "{{ echaloasuerte_3_app_settings }}"
    command: "createsuperuser --noinput --username={{ eas_admin_username }} --email={{ eas_admin_email }}"
  become: yes
  become_user: www-data
  when: checksuperuser.failed
  tags:
  - superuser

- name: django set superuser pass
  django_manage:
    app_path: "{{ echaloasuerte_3_app }}"
    virtualenv: "{{ echaloasuerte_3_venv }}"
    settings: "{{ echaloasuerte_3_app_settings }}"
    command: shell -c 'from django.contrib.auth.models import User; u = User.objects.get(username="{{ eas_admin_username }}"); u.set_password("{{ eas_admin_pass }}"); u.save()'
  become: yes
  become_user: www-data
  when: checksuperuser.failed
  tags:
  - superuser


# Database cleanup

- name: Install purge script
  template:
    src: purge-old-draws.sh
    dest: "{{ echaloasuerte_3_root }}/purge-old-draws.sh"
    mode: 0755
  become: yes
  become_user: www-data

- name: Install echaloasuerte-purge Systemd service file
  template:
    src: echaloasuerte-purge.service
    dest: /etc/systemd/system/echaloasuerte-purge.service
    mode: 0644
  become: yes

- name: Install echaloasuerte-purge Systemd timer file
  copy:
    src: echaloasuerte-purge.timer
    dest: /etc/systemd/system/echaloasuerte-purge.timer
    mode: 0644
  become: yes

- name: Ensure echaloasuerte-purge.timer is started and enabled on boot (systemd)
  service:
    name: echaloasuerte-purge.timer
    state: started
    enabled: yes
  become: yes

# Frontend
- name: Install docker python package
  pip:
    name: docker
  become: yes

- name: Init a new swarm with default parameters
  docker_swarm:
    state: present
  become: yes

- name: pull echaloasuerte A image
  docker_image:
    name: etcaterva/echaloasuerte
    tag: "{{ echaloasuerte_3_git_branch }}"
    source: pull
    force_source: yes
  become: yes
  register: docker_pull
  tags:
  - cd-frontend

- name: pull echaloasuerte B image
  docker_image:
    name: etcaterva/echaloasuerte
    tag: "{{ echaloasuerte_3_git_branch_b}}"
    source: pull
    force_source: yes
  become: yes
  register: docker_pull
  tags:
  - cd-frontend-b
  when: echaloasuerte_3_git_branch_b is defined

- name: Start eas A service in docker swarm
  docker_swarm_service:
    name: eas-service
    image: "etcaterva/echaloasuerte:{{ echaloasuerte_3_git_branch }}"
    resolve_image: yes
    update_config:
      order: start-first
      parallelism: 1
      delay: 10s
    restart_config:
      condition: any
      delay: 5s
    healthcheck:
      # Check if eas server is healthy by curl'ing the server.
      # If this fails or timeouts, the healthcheck fails.
      test: ["CMD", "curl", "--fail", "http://localhost:80"]
      interval: 1m30s
      timeout: 10s
      retries: 10
      start_period: 5s
    replicas: "{{ echaloasuerte_3_replicas }}"
    env:
      LOGS_SUFFIX: "{{'{{.Task.Slot}}_{{.Task.ID}}'}}"
    publish:
    - mode: ingress
      published_port: 8081
      target_port: 80
    mounts:
      - source: "{{ echaloasuerte_3_logs }}"
        target: /var/log/eas3/
        type: bind
  become: yes
  tags:
  - cd-frontend

- name: Start eas B service in docker swarm
  docker_swarm_service:
    name: eas-service-b
    image: "etcaterva/echaloasuerte:{{ echaloasuerte_3_git_branch_b }}"
    resolve_image: yes
    update_config:
      order: start-first
      parallelism: 1
      delay: 10s
    restart_config:
      condition: any
      delay: 5s
    healthcheck:
      # Check if eas server is healthy by curl'ing the server.
      # If this fails or timeouts, the healthcheck fails.
      test: ["CMD", "curl", "--fail", "http://localhost:80"]
      interval: 1m30s
      timeout: 10s
      retries: 10
      start_period: 5s
    replicas: "{{ echaloasuerte_3_replicas }}"
    env:
      LOGS_SUFFIX: "{{'{{.Task.Slot}}_{{.Task.ID}}'}}"
    publish:
    - mode: ingress
      published_port: 8082
      target_port: 80
    mounts:
      - source: "{{ echaloasuerte_3_logs }}"
        target: /var/log/eas3/
        type: bind
  become: yes
  tags:
  - cd-frontend-b
  when: echaloasuerte_3_git_branch_b is defined

- name: Delete docker service if no A/B testing
  command: docker service rm eas-service-b
  become: yes
  when: echaloasuerte_3_git_branch_b is not defined
  ignore_errors: yes

- name: Docker prune old images and containers
  docker_prune:
    containers: yes
    images: yes
  become: yes
  tags:
  - cd-frontend
  - cd-frontend-b

- name: Fix owners of echaloasuerte application tree
  file:
    path: "{{ item }}"
    state: directory
    owner: www-data
    group: www-data
    recurse: yes
  become: yes
  with_items:
  - "{{ echaloasuerte_3_root }}"
  - "{{ echaloasuerte_3_app }}"
  - "{{ echaloasuerte_3_venv }}"
  - "{{ echaloasuerte_3_logs }}"

- name: Create uwsgi config file for echaloasuerte
  template:
    src: echaloasuerte-uwsgi.ini
    dest: /etc/uwsgi{{ item }}/sites/{{ echaloasuerte_3_app_name }}.ini
  become: yes
  with_sequence: count={{ uwsgi_n }}
  notify:
  - restart all uwsgi
  tags:
  - uwsgi

- name: Create the nginx config file for echaloasuerte
  template:
    src: echaloasuerte-nginx.conf
    dest: /etc/nginx/sites-available/{{ echaloasuerte_3_app_name }}.conf
  become: yes
  notify:
  - restart nginx
  - purge cloudflare cache
  tags:
  - nginx-conf

- name: Enable nginx site ecaheloasuerte
  file:
    src: ../sites-available/{{ echaloasuerte_3_app_name }}.conf
    dest: /etc/nginx/sites-enabled/{{ echaloasuerte_3_app_name }}.conf
    state: link
  become: yes
  notify:
  - restart nginx
  - purge cloudflare cache

- name: Ensure nginx is running
  service:
    name: nginx
    state: started
  become: yes
